<%- include partials/header.ejs %>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advertise your Coin</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            color: #333;
        }
        .container {
            max-width: 600px;
            margin: 50px auto;
            padding: 20px;
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        h1 {
            text-align: center;
            margin-bottom: 30px;
        }
        label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
        }
        input[type="text"] {
            width: 100%;
            padding: 8px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }
        button {
            padding: 10px 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #45a049;
        }
        #details {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Advertise your Coin</h1>
        <label for="name">Coin Name:</label>
        <input type="text" id="name">
        <label for="description">Coin Description:</label>
        <input type="text" id="description">
        <label for="dateOfLaunch">Date of Launch:</label>
        <input type="text" id="dateOfLaunch">
        <button onclick="setDetails()">Submit</button>
        <button onclick="getDetails()">View</button>
        <div id="details"></div>
        <div id="contractArea"></div>
    </div>

    <script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js"></script>
</body>
</html>

</head>
<body onload="connectMetamask(),connectContract()">
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7-rc.0/web3.min.js"></script>
    <div class="container">
        <div class="row mt-5">
            <div class="col-md-6 offset-md-3">
                <div id="readArea" class="text-center metamask-area">
                    <h2 class="mt-3">Connected to MetaMask</h2>
                    <p id="userArea" class="mt-3 text-muted">Status: Not connected to MetaMask</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        let account;
        const connectMetamask = async () => {
            const accounts = await ethereum.request({method: "eth_requestAccounts"});
            account = accounts[0];
            document.getElementById("userArea").innerHTML = `User Account: ${account}`;
        }

        let contract;

        const connectContract = async () => {
            const ABI = [
                {
                    "anonymous": false,
                    "inputs": [
                        {
                            "indexed": false,
                            "internalType": "string",
                            "name": "name",
                            "type": "string"
                        },
                        {
                            "indexed": false,
                            "internalType": "string",
                            "name": "description",
                            "type": "string"
                        },
                        {
                            "indexed": false,
                            "internalType": "string",
                            "name": "dateOfLaunch",
                            "type": "string"
                        }
                    ],
                    "name": "DetailsSet",
                    "type": "event"
                },
                {
                    "inputs": [
                        {
                            "internalType": "string",
                            "name": "_name",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "_description",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "_dateOfLaunch",
                            "type": "string"
                        }
                    ],
                    "name": "setDetails",
                    "outputs": [],
                    "stateMutability": "nonpayable",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "dateOfLaunch",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "description",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "getDetails",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        },
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                },
                {
                    "inputs": [],
                    "name": "name",
                    "outputs": [
                        {
                            "internalType": "string",
                            "name": "",
                            "type": "string"
                        }
                    ],
                    "stateMutability": "view",
                    "type": "function"
                }
            ];
            const Address = "0x0715fdaAE4f57118b309B5087bb4A534c5498D00";
            window.web3 = await new Web3(window.ethereum);
            contract = new window.web3.eth.Contract(ABI, Address);
            // Set the innerHTML of contractArea to indicate connection status
            document.getElementById("contractArea").innerHTML = "Connected to Contract";
        }

        const setDetails = () => {
            const name = document.getElementById("name").value;
            const description = document.getElementById("description").value;
            const dateOfLaunch = document.getElementById("dateOfLaunch").value;
        
            // Check if any of the fields are empty
            if (!name || !description || !dateOfLaunch) {
                alert('Please fill in all fields');
                return;
            }
        
            window.ethereum.request({ method: 'eth_requestAccounts' })
                .then((accounts) => {
                    const account = accounts[0];
                    return contract.methods.setDetails(name, description, dateOfLaunch).send({ from: account });
                })
                .then(() => {
                    alert('Details set successfully');
                })
                .catch((error) => {
                    console.error('Error setting details:', error);
                    alert('Failed to set details');
                });
        }
        

        const getDetails = () => {
            contract.methods.getDetails().call()
                .then((result) => {
                    const name = result[0];
                    const description = result[1];
                    const dateOfLaunch = result[2];
                    document.getElementById("details").innerHTML = `
                        Name: ${name}<br>
                        Description: ${description}<br>
                        Date of Launch: ${dateOfLaunch}<br>
                    `;
                })
                .catch((error) => {
                    console.error('Error getting details:', error);
                    alert('Failed to get details');
                });
        }
    </script>
</body>